@page "/weather"
@attribute [StreamRendering]
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<PageTitle>Weather</PageTitle>

<h1 style="letter-spacing: 0.1em; font-weight: bold;">Weather</h1>

<p>This component demonstrates showing data.</p>

@if (_forecasts is null)
{
    @* <p><em>Loading...</em></p> *@
    <Spinner Size="Spinner.Sizes.SMALL" />
}
else
{
    <table class="table table-dark table-bordered table-striped overflow-hidden" style="border-radius: 10px;">
        @* <caption>You can sort the table by Date & Temp by clicking on their respective column headers.</caption> *@
        <thead>
            <tr>
                <th
                    class="sortable-column"
                    @onclick="@SortByDate"
                    title="Sort by Date"
                >
                    Date&nbsp;
                    <em class="@(_isSortedColumn[0] ? "show-sorted-sign" : "hide-sorted-sign")">
                        <Icon IconType="@(_isSortedColumnRev[0] ? Icon.IconTypes.DESCENDING : Icon.IconTypes.ASCENDING)" />
                    </em>
                </th>
                <th 
                    class="sortable-column" 
                    @onclick="@SortByTemp" 
                    title="Sort by Temp"
                >
                    Temp. (C)&nbsp;
                    <em class="@(_isSortedColumn[1] ? "show-sorted-sign" : "hide-sorted-sign")">
                        <Icon IconType="@(_isSortedColumnRev[1] ? Icon.IconTypes.DESCENDING : Icon.IconTypes.ASCENDING)" />
                    </em>
                </th>
                <th
                    class="sortable-column"
                    @onclick="@SortByTemp"
                    title="Sort by Temp"
                >
                    Temp. (F)&nbsp;
                    <em class="@(_isSortedColumn[1] ? "show-sorted-sign" : "hide-sorted-sign")">
                        <Icon IconType="@(_isSortedColumnRev[1] ? Icon.IconTypes.DESCENDING : Icon.IconTypes.ASCENDING)" />
                    </em>
                </th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p style="font-size: small; color: gray;">
        You can sort the table by Date & Temp by clicking on their respective column headers.
    </p>
}

@code {
    private WeatherForecast[]? _forecasts;
    private bool[] _isSortedColumn = [true, false];
    private bool[] _isSortedColumnRev = [false, false];

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(2000);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        _forecasts = Enumerable.Range(1, 7).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private void SortByDate()
    {
        if (_forecasts is not null)
        {
            if (!_isSortedColumn[0])
            {
                int size = _forecasts.Length;
                for (int i = 0; i < size - 1; i++)
                {
                    int k = i;
                    for (int j = i + 1; j < size; j++)
                    {
                        if (_forecasts[j].Date < _forecasts[k].Date)
                        {
                            k = j;
                        }
                    }
                    WeatherForecast temp = _forecasts[i];
                    _forecasts[i] = _forecasts[k];
                    _forecasts[k] = temp;
                }
                Array.Fill(_isSortedColumn, false);
                Array.Fill(_isSortedColumnRev, false);
                _isSortedColumn[0] = true;
            }
            else 
            {
                if (_isSortedColumnRev[0])
                {
                    Array.Reverse(_forecasts);
                    _isSortedColumnRev[0] = false;
                }
                else 
                {
                    Array.Reverse(_forecasts);
                    _isSortedColumnRev[0] = true;
                }
            }
        }
    }

    private void SortByTemp()
    {
        if (_forecasts is not null)
        {
            if (!_isSortedColumn[1])
            {
                int size = _forecasts.Length;
                for (int i = 0; i < size - 1; i++)
                {
                    int k = i;
                    for (int j = i + 1; j < size; j++)
                    {
                        if (_forecasts[j].TemperatureC < _forecasts[k].TemperatureC)
                        {
                            k = j;
                        }
                    }
                    WeatherForecast temp = _forecasts[i];
                    _forecasts[i] = _forecasts[k];
                    _forecasts[k] = temp;
                }
                Array.Fill(_isSortedColumn, false);
                Array.Fill(_isSortedColumnRev, false);
                _isSortedColumn[1] = true;
            }
            else
            {
                if (_isSortedColumnRev[1])
                {
                    Array.Reverse(_forecasts);
                    _isSortedColumnRev[1] = false;
                }
                else 
                {
                    Array.Reverse(_forecasts);
                    _isSortedColumnRev[1] = true;
                }
            }
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}